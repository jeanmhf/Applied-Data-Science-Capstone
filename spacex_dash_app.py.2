# Import required libraries
import pandas as pd
import dash
from dash import html, dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                dcc.Dropdown(id='site-dropdown',
                                options=[
                                    {'label': 'All Sites', 'value': 'ALL'},
                                    {'label': 'site1', 'value': 'CCAFS LC-40'},
                                    {'label': 'site2', 'value': 'CCAFS SLC-40'},
                                    {'label': 'site3', 'value': 'KSC LC-39A'},
                                    {'label': 'site4', 'value': 'VAFB SLC-4E'},
                                    ],
                                    value='ALL',
                                    placeholder='place holder here',
                                    searchable=True
                                    ),
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                
                                
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                dcc.RangeSlider(
                                    id='payload-slider',
                                    min=0, max=10000,step=1000,
                                    marks={0:'0',
                                    100:'100'},
                                    value=[min_payload,max_payload]
                                    ),

                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
@app.callback(Output(component_id='success-pie-chart', component_property='figure'), Input(component_id='site-dropdown', component_property='value'))
                                
def get_pie_chart(entered_site):
    if entered_site == "ALL":
        success_counts=spacex_df.groupby("Launch Site")["class"].mean().reset_index()
        #success_counts = spacex_df["class"].value_counts().reset_index()
        success_counts.columns = ["Launch", "Count"]
        launch_sites = success_counts["Launch"].unique()
        color_map = {site: f"rgb({i * 50}, {i * 60}, {i * 70})" for i, site in enumerate(launch_sites)}
        fig = px.pie(
        success_counts,
        values="Count",
        names="Launch",
        title="Total Successful Launches (All Sites)",
        color="Launch",
        color_discrete_map=color_map
        )
    else:
        filtered_df = spacex_df[spacex_df["Launch Site"] == entered_site]
        outcome_counts = filtered_df["class"].value_counts().reset_index()
        outcome_counts.columns = ["Class", "Count"]
        

        fig = px.pie(
            outcome_counts,
            values="Count",
            names="Class",
            title=f"Launch Outcomes for {entered_site}",
            color="Class",
            color_discrete_map={1: "green", 0: "red"}
            )
    return fig
# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback(Output(component_id='success-payload-scatter-chart', component_property='figure'),
[Input(component_id='site-dropdown', component_property='value'), Input(component_id="payload-slider", component_property="value")])

def update_scatter_chart(selected_site, payload_range):
    # Filter data based on payload range
    filtered_df = spacex_df[
        (spacex_df["Payload Mass (kg)"] >= payload_range[0]) &
        (spacex_df["Payload Mass (kg)"] <= payload_range[1])
    ]

    # Check if ALL sites are selected
    if selected_site == "ALL":
        fig = px.scatter(
            filtered_df,
            x="Payload Mass (kg)",
            y="class",
            color="Booster Version Category",
            title="Correlation between Payload and Success for All Sites"
        )
    else:
        # Filter data for the selected site
        site_df = filtered_df[filtered_df["Launch Site"] == selected_site]
        fig = px.scatter(
            site_df,
            x="Payload Mass (kg)",
            y="class",
            color="Booster Version Category",
            title=f"Correlation between Payload and Success for {selected_site}"
        )

    return fig
# Run the app
if __name__ == '__main__':
    app.run_server()